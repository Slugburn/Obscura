@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<canvas id ="canvas" width="1200" height="800"  />

@section scripts{
    <script type="text/javascript">
        var background = 'lightgray';
        
        $(document).ready(function () {

            var mainHub = $.connection.main;

            mainHub.client.displayMap = function (model) {
                drawSectors(model);
            };

            mainHub.client.updateRound = updateRound;
            
            mainHub.client.updateSector = drawSector;


            $.connection.hub.error(function (err) {
                console.log(err.responseText);
            });

            $.connection.hub.start()
                .done(function() {
                    mainHub.server.start();
                })
                .fail(function(err) {
                    alert(err);
                });

//            $.getJSON("Main/Test",
//                function(data) {
//                    drawSectors(data);
//                });

        });
        
        function updateRound(round) {
            $("canvas").drawRect({
                strokeStyle: 'black',
                fillStyle: 'white',
                x: 60, y: 20,
                height: 30, width : 100,
            }).drawText({
                fillStyle: 'black',
                font: '12pt Arial',
                x: 60, y: 20,
                height: 30, width: 100,
                text: round <= 10 ? "Round " + round : "Game Over"
            });
        }
        
        function drawSectors(sectors) {
            $("canvas").drawRect({
                fillStyle: background,
                width: 2000,
                height: 2000
            });
            $.each(sectors, function (x, s) {
                drawSector(s);
            });
        }
        
        function drawSector(s) {
            x = -s.x * 86 + s.y * 43 + 500;
            y = -s.y * 75 + 400;
            if (s.color) {
                fillStyle =
                    $("canvas").createGradient({
                        x1: x,
                        y1: y,
                        x2: x,
                        y2: y,
                        r1: 20,
                        r2: 40,
                        c1: background,
                        c2: s.color
                    });
            } else {
                fillStyle = "transparent";
            }
            $("canvas").drawPolygon({
                strokeStyle: 'black',
                strokeWidth: 2,
                fillStyle: fillStyle,
                x: x,
                y: y,
                radius: 50,
                sides: 6,
                rotate: 90
            });
            $("canvas").drawPolygon({
                strokeStyle: 'black',
                fillStyle: 'yellow',
                x: x,
                y: y,
                radius: 10,
                sides: 3,
                rotate: 180,
                concavity: -0.5
            }).drawText({
                fillStyle: 'black',
                font: '8pt Arial',
                x: x,
                y: y,
                text: s.vp
            });
            if (s.wormholes) {
                $.each(s.wormholes, function (i, w) {
                    $("canvas").drawArc({
                        strokeStyle: 'black',
                        fillStyle: 'white',
                        x: x,
                        y: y,
                        start: 180,
                        end: 0,
                        translateX: 43,
                        rotate: (w - 6) * 30,
                        radius: 8
                    });
                });
            }
            if (s.planets) {
                $.each(s.planets, function (i, p) {
                    drawPlanet(p, i);
                });
            }

            $.each(s.ships, function(ownerIdx, shipOwner) {
                $.each(shipOwner.types, function (typeIdx, shipType) {
                    drawShip(shipOwner.owner, shipType.type, shipType.count, x + typeIdx * 16 - 8 * shipOwner.types.length, y + ownerIdx * 16 + 20);
                });
            });
        }
        
        function drawPlanet(planet, pIdx) {
            var angle = (pIdx * 60 + 30) * Math.PI / 180;
            var distance = -25;
            var translateX = distance * Math.cos(angle);
            var translateY = distance * Math.sin(angle);
            if (planet.type === 'Orbital') {
                $("canvas").drawArc({
                    fillStyle: 'black',
                    x: x,
                    y: y,
                    radius: 12,
                    translateX: translateX,
                    translateY: translateY
                }).drawEllipse({
                    strokeStyle: 'white',
                    strokeWidth: 2,
                    x: x + translateX,
                    y: y + translateY,
                    width: 15,
                    height: 20,
                    rotate: -30
                });
            } else {
                var planetColor = {
                    material: 'saddlebrown',
                    money: 'darkorange',
                    science: 'salmon',
                    any: 'lightgray'
                };
                var fillStyle = $("canvas").createGradient({
                    x1: x,
                    y1: y,
                    x2: x,
                    y2: y,
                    r1: 0,
                    r2: 12,
                    c1: 'white',
                    c2: planetColor[planet.type.toLowerCase()]
                });
                $("canvas").drawArc({
                    fillStyle: fillStyle,
                    strokeStyle: 'black',
                    x: x,
                    y: y,
                    radius: 12,
                    translateX: translateX,
                    translateY: translateY
                });
            }
            if (planet.squares.length === 1) {
                drawSquare(planet.squares[0], pIdx, 0);
            } else {
                drawSquare(planet.squares[0], pIdx, -6);
                drawSquare(planet.squares[1], pIdx, 6);
            }
        }
        
        function drawSquare(square, pIdx, sTrans) {
            var angle = (pIdx * 60 + 30) * Math.PI / 180;
            var distance = -25;
            var translateX = distance * Math.cos(angle) + sTrans;
            var translateY = distance * Math.sin(angle);
            if (square.color) {
                $('canvas').drawRect({
                    strokeStyle: square.color.toLowerCase() === 'black' ? 'white' : 'black',
                    fillStyle: square.color,
                    width: 10,
                    height: 10,
                    x: x,
                    y: y,
                    translateX: translateX,
                    translateY: translateY
                });
            } else {
                $('canvas').drawRect({
                    fillStyle: 'white',
                    width: 10,
                    height: 10,
                    x: x,
                    y: y,
                    translateX: translateX,
                    translateY: translateY
                });
                if (square.advanced) {
                    $('canvas').drawPolygon({
                        fillStyle: 'black',
                        x: x,
                        y: y,
                        radius: 4,
                        sides: 5,
                        concavity: 0.5,
                        translateX: translateX,
                        translateY: translateY
                    });
                }
            }
        }
        
        function drawShip(shipOwner, shipType, count, x, y) {
            var spec = shipSpec[shipType.toLowerCase()];
            var d = $.extend(spec, {
                x: x,
                y: y,
                strokeStyle: "black",
                fillStyle: shipOwner,
                closed: true
            });
            $("canvas").drawVector(d);
        }
        
        var shipSpec = {
            interceptor: {
                a1: 0, l1: 4,
                a2: 90, l2: 4,
                a3: 0, l3: 3,
                a4: 90, l4: 4,
                a5: 180, l5: 3,
                a6: 90, l6: 4,
                a7: 180, l7: 4,
                a8: 270, l8: 4,
                a9: 180, l9: 1,
                a10: 270, l10: 4,
                a11: 0, l11: 1,
            },
            cruiser: {
                a1: 0, l1: 8,
                a2: 90, l2: 4,
                a3: 0, l3: 2,
                a4: 90, l4: 4,
                a5: 180, l5: 2,
                a6: 90, l6: 4,
                a7: 180, l7: 8,
                a8: 270, l8: 4,
                a9: 0, l9: 2,
                a10: 270, l10: 4,
                a11: 180, l11: 2,
            },
            dreadnought: {
                a1: 0, l1: 12,
                a2: 90, l2: 4,
                a3: 180, l3: 2,
                a4: 90, l4: 4,
                a5: 0, l5: 2,
                a6: 90, l6: 4,
                a7: 180, l7: 12,
                a8: 270, l8: 4,
                a9: 0, l9: 2,
                a10: 270, l10: 4,
                a11: 180, l11: 2,
            },
            starbase: {
                a1: 0, l1: 4,
                a2: 90, l2: 4,
                a3: 0, l3: 4,
                a4: 90, l4: 4,
                a5: 180, l5: 4,
                a6: 90, l6: 4,
                a7: 180, l7: 4,
                a8: 270, l8: 4,
                a9: 180, l9: 4,
                a10: 270, l10: 4,
                a11: 0, l11: 4,
            },
            ancientship: {
                
            },
            gcds: {
                
            }
        };
        
    </script>
}
